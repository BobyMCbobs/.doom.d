#+PROPERTY: header-args:elisp+ :results silent

*  Humac Human Deets
On a sharing.io cluster, we should have these two env vars set...so we can personalize to the person who started the instance.
Otherwise, they're just a friend.
#+BEGIN_SRC elisp
(setq user-full-name (if (getenv "GIT_AUTHOR_NAME")
                         (getenv "GIT_AUTHOR_NAME")
                       "ii friend")
      user-mail-address (if (getenv "GIT_COMMIT_EMAIL")
                            (getenv "GIT_COMMIT_EMAIL")
                          "ii*ii.ii"))
#+END_SRC

* Ergonomics
** Better Local Leaders
I got used to using comma as the localleader key, from spacemacs, so i keep it.
#+BEGIN_SRC elisp
(setq doom-localleader-key ",")
#+END_SRC
** Use mouse scroll
#+BEGIN_SRC elisp
 (defun scroll-up-5-lines ()
    "Scroll up 5 lines"
    (interactive)
    (scroll-up 5))

  (defun scroll-down-5-lines ()
    "Scroll down 5 lines"
    (interactive)
    (scroll-down 5))

  (global-set-key (kbd "<mouse-4>") 'scroll-down-5-lines)
  (global-set-key (kbd "<mouse-5>") 'scroll-up-5-lines)
#+END_SRC

** lispy vim
This sets up keybindings for manipuulating parenthesis with slurp and barf when in normal or visual mode.

#+NAME: Setup Lispy Vim Bindings
#+BEGIN_SRC elisp
(map!
 :map smartparens-mode-map
 :nv ">" #'sp-forward-slurp-sexp
 :nv "<" #'sp-forward-barf-sexp
 :nv "}" #'sp-backward-barf-sexp
 :nv "{" #'sp-backward-slurp-sexp)
#+END_SRC

* Consistency
** consistent paths
If you are using a mac, you can have  problem with running source blocks or some language support as the shell PATH isn't found in emacs. [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] is a solution for this.
#+BEGIN_SRC elisp
(when (memq window-system '(mac ns x)) (exec-path-from-shell-initialize))
#+END_SRC
* Appearance
** Fonts
;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
#+BEGIN_SRC elisp
(setq doom-font (font-spec :family "Source Code Pro" :size 10)
      ;; )(font-spec :family "Source Code Pro" :size 8 :weight 'semi-light)
      doom-serif-font (font-spec :family "Source Code Pro" :size 10)
      doom-variable-pitch-font (font-spec :family "Source Code Pro" :size 10)
      doom-unicode-font (font-spec :family "Input Mono Narrow" :size 12)
      doom-big-font (font-spec :family "Source Code Pro" :size 10))
#+END_SRC
** Theme
#+BEGIN_SRC elisp
(setq doom-theme 'doom-gruvbox)
#+END_SRC
** Indent
#+BEGIN_SRC elisp
(setq standard-indent 2)
#+END_SRC
** LSP Behaviour
This brings over the lsp behaviour of spacemacs, so working with code feels consistent across emacs..
#+NAME: Setup LSP-UI
#+BEGIN_SRC elisp
(use-package! lsp-ui
:config
          (setq lsp-navigation 'both)
          (setq lsp-ui-doc-enable t)
          (setq lsp-ui-doc-position 'top)
          (setq lsp-ui-doc-alignment 'frame)
          (setq lsp-ui-doc-use-childframe t)
          (setq lsp-ui-doc-use-webkit t)
          (setq lsp-ui-doc-delay 0.2)
          (setq lsp-ui-doc-include-signature nil)
          (setq lsp-ui-sideline-show-symbol t)
          (setq lsp-ui-remap-xref-keybindings t)
          (setq lsp-ui-sideline-enable t)
          (setq lsp-prefer-flymake nil)
          (setq lsp-print-io t))
#+END_SRC
* Languages
** Web
auto-closing tags works different if you are in a terminal or gui.  We want consistent behaviour when editing any sort of web doc.
I also like it to create a closing tag when i've starteed my opening tag, which is auto-close-style 2
#+BEGIN_SRC elisp
(setq web-mode-enable-auto-closing t)
(setq-hook! web-mode web-mode-auto-close-style 2)
#+END_SRC
** Go
Go is enabled, with LSP support in our [[file:init.el][init.el]].  To get it working properly, though, you want to ensure you have all the go dependencies installed on your computer and your GOPATH set. It's recommended you read the doom docs on golang, following all links to ensure your dependencies are up to date.
[[file:~/humacs/doom-emacs/modules/lang/go/README.org][Go Docs]]

I've had inconsistencies with having the GOPATH set on humacs boxes, so if we are in a humacs pod, explicitly set the GOPATH
#+NAME: Set GOPATH on humacs boxes
#+BEGIN_SRC elisp
(when (and (getenv "HUMACS_PROFILE") (not (getenv "GOPATH")))
  (setenv "GOPATH" "/home/ii/go"))
#+END_SRC
** Vue
Tried out vue-mode, but it was causing more problems than benefits and doesn't seem to do much beyond what web-mode plus vue-lsp support would do.
So, following [[https://genehack.blog/2020/08/web-mode-eglot-vetur-vuejs-=-happy/][Gene Hack's Blog Post]], we'll create our own mode, that just inherits all of web-mode and adds lsp.
This requires for [[https://npmjs.com/vls][vls]] to be installed.
#+BEGIN_SRC elisp
(define-derived-mode ii-vue-mode web-mode "iiVue"
  "A major mode derived from web-mode, for editing .vue files with LSP support.")
(add-to-list 'auto-mode-alist '("\\.vue\\'" . ii-vue-mode))
(add-hook 'ii-vue-mode-hook #'lsp!)
#+END_SRC
* Org
Various settings specific to org-mode to satisfy our preferences
** Show properties when cycling through subtrees
This is an adjustment to the default hook, which hides drawers by default
#+BEGIN_SRC elisp
(setq org-cycle-hook
      ' (org-cycle-hide-archived-subtrees
         org-cycle-show-empty-lines
         org-optimize-window-after-visibility-change))
#+END_SRC
* Literate!
** SQL
#+BEGIN_SRC elisp
(setq org-babel-default-header-args:sql-mode
      '((:results . "replace code")
        (:product . "postgres")
        (:wrap . "SRC example")))
#+END_SRC
** Go
#+BEGIN_SRC elisp
(setq org-babel-default-header-args:go
      '((:results . "replace code")
        (:wrap . "SRC example")))
#+END_SRC

** Pairing
#+BEGIN_SRC elisp
(use-package! osc52e)
(use-package! iterm)
(use-package! ob-tmate)
#+END_SRC
** Exporting
#+BEGIN_SRC elisp
(require 'ox-gfm)
#+END_SRC

** Sane Org Defaults
In addition to the org defaults, we wanna make sure our exports include results, but that we dont' try to run all our tamte commands again.
#+BEGIN_SRC elisp
(setq org-babel-default-header-args
      '((:session . "none")
        (:results . "replace code")
        (:comments . "org")
        (:exports . "both")
        (:eval . "never-export")
        (:tangle . "no")))

(setq org-babel-default-header-args:shell
      '((:results . "output code verbatim replace")
        (:wrap . "example")))
#+END_SRC

* Snippets
These are helpful text expanders made with yasnippet
** org-mode
*** Blog Property
Creates a property drawer with all the necessary info for our blog.
#+BEGIN_SRC snippet :tangle snippets/org-mode/blog
# -*- snippet -*-
# name: blog
# key: <blog
# --
,** ${1:Enter Title}
   :PROPERTIES:
   :EXPORT_FILE_NAME:  ${1:$(downcase(replace-regexp-in-string " " "-" yas-text))}
   :EXPORT_DATE: `(format-time-string "%Y-%m-%d")`
   :EXPORT_HUGO_MENU: :menu "main"
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :summary "${2:No Summary Provided}"
   :END:
   ${3:"Enter Tags"$(unless yas-modified-p (progn (counsel-org-tag)(kill-whole-line)))}
#+END_SRC

* Dashboard
** Banners
#+begin_src elisp
(setq
      ;; user-banners-dir
      ;; doom-dashboard-banner-file "img/kubemacs.png"
      ;; +doom-dashboard-banner-dir (concat humacs-spacemacs-directory  (convert-standard-filename "/banners/"))
      ;; +doom-dashboard-banner-file "img/kubemacs.png"
      ;; fancy-splash-image (concat user-banners-dir doom-dashboard-banner-file)
      )
#+end_src
* ii tools
** ssh find agent
#+BEGIN_SRC elisp
(defun ssh-find-agent ()
"Look for a running SSH agent on the host machine, and set it as our SSH_AUTH_SOCK.
This is useful for pushing changes to git repos using your ssh key, or for tramping in an org file to a remote machine.
It assumes you've added an ssh-agent and, if on a remote machine, forwarded it to that machine.
For more info, see: https://www.ssh.com/ssh/agent
This function is INTERACTIVE."
  (interactive)
  (setenv "SSH_AUTH_SOCK" (shell-command-to-string "find /tmp /run/host/tmp/ -type s -regex '.*/ssh-.*/agent..*$' 2> /dev/null | tail -n 1 | tr -d '\n'"))
  (message (getenv "SSH_AUTH_SOCK")))
#+END_SRC
** Timesheets
#+NAME: iso-week-to-time
#+BEGIN_SRC elisp
(defun iso-week-to-time (year week day)
  (pcase-let ((`(,m ,d ,y)
               (calendar-gregorian-from-absolute
                (calendar-iso-to-absolute (list week day year)))))
    (encode-time 0 0 0 d m y)))

(define-skeleton ii-timesheet-skel
  "Prompt the week and year before generating ii timesheet for the user."
  ""
  (text-mode)
  > "#+TITLE: Timesheet: Week " (setq v1 (skeleton-read "Timesheet Week? "))
  ", " (setq v2 "2020")
  " (" (getenv "USER") ")" \n
  > "#+AUTHOR: " (getenv "USER") \n
  > " " \n
  > "Please refer to the instructions in ii-timesheet.org as required." \n
  > " " \n
  > "* Week Summary" \n
  > " " _ \n
  > "#+BEGIN: clocktable :scope file :block thisweek :maxlevel 2 :emphasise t :tags t :formula %" \n
  > "#+END" \n
  > " " \n

  > "* " (format-time-string "%B %e, %Y" (iso-week-to-time (string-to-number v2) (string-to-number v1) 1)) \n
  > "** Task X" \n
  > "* " (format-time-string "%B %e, %Y" (iso-week-to-time (string-to-number v2) (string-to-number v1) 2)) \n
  > "** Task X" \n
  > "* " (format-time-string "%B %e, %Y" (iso-week-to-time (string-to-number v2) (string-to-number v1) 3)) \n
  > "** Task X" \n
  > "* " (format-time-string "%B %e, %Y" (iso-week-to-time (string-to-number v2) (string-to-number v1) 4)) \n
  > "** Task X" \n
  > "* " (format-time-string "%B %e, %Y" (iso-week-to-time (string-to-number v2) (string-to-number v1) 5)) \n
  > "** Task X" \n
  > " " \n
  (org-mode)
  (save-buffer))
#+END_SRC

#+NAME: ii-timesheet
#+BEGIN_SRC elisp
(defun ii-timesheet ()
  "Create a timesheet buffer and insert skel as defined in ii-timesheet-skel.
   This function is INTERACTIVE."
  (interactive)
  (require 'cal-iso)
  (switch-to-buffer (get-buffer-create "*ii-timesheet*"))
  (ii-timesheet-skel))
#+END_SRC
